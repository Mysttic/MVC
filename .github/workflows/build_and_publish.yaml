name: Build and Publish

on:
  push:
    branches:
      - Mysttic-actions
  pull_request:
    branches:
      - Mysttic-actions

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project:
          - MVC
          - MVC.MSSQLListener
          - MVC.MySQLListener
          - MVC.OracleListener
          - MVC.PostgreSQLListener

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ${{ matrix.project }}/${{ matrix.project }}.csproj

      - name: Build
        run: dotnet build ${{ matrix.project }}/${{ matrix.project }}.csproj --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ${{ matrix.project }}/${{ matrix.project }}.csproj --configuration Release --no-restore --output ./output/${{ matrix.project }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: ./output

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: output

      - name: Set up Git
        run: git config --global user.name 'github-actions'

      - name: Get Version Tag
        id: version
        run: echo "tag=v1.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: Release ${{ env.tag }}
          draft: false
          prerelease: false

      - name: Compress output directory
        run: zip -r release.zip ./output

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: release.zip
          asset_content_type: application/zip
